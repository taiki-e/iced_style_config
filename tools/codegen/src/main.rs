#![warn(rust_2018_idioms, single_use_lifetimes)]

use std::path::{Path, PathBuf};

use anyhow::Result;
use fs_err as fs;
use proc_macro2::TokenStream;
use quote::quote;
use schemars::schema_for;

fn main() -> Result<()> {
    gen_color_map()?;
    gen_schema()?;
    Ok(())
}

fn workspace_root() -> PathBuf {
    let mut dir = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
    dir.pop(); // codegen
    dir.pop(); // tools
    dir
}

fn header() -> String {
    concat!(
        "// This file is @generated by ",
        env!("CARGO_BIN_NAME"),
        ".\n",
        "// It is not intended for manual editing.\n",
        "\n",
        "#![allow(clippy::wildcard_imports)]\n",
        "\n",
    )
    .into()
}

fn write(path: &Path, contents: TokenStream) -> Result<()> {
    let mut out = header().into_bytes();
    out.extend_from_slice(prettyplease::unparse(&syn::parse2(contents).unwrap()).as_bytes());
    if path.is_file() && fs::read(&path)? == out {
        return Ok(());
    }
    fs::write(path, out)?;
    Ok(())
}

fn gen_color_map() -> Result<()> {
    let workspace_root = &workspace_root();
    let s = fs::read_to_string(workspace_root.join("src/colors.rs"))?;
    let ast = syn::parse_file(&s)?;

    let mut inserts = vec![quote! {
        map.insert("transparent", iced::Color::TRANSPARENT);
    }];
    for i in ast.items {
        if let syn::Item::Const(i) = i {
            let mut s = i.ident.to_string();
            let ident = &i.ident;
            s.make_ascii_lowercase();
            inserts.push(quote! {
                map.insert(#s, colors::#ident);
            });
        }
    }
    let capacity = inserts.len();
    let tokens = quote! {
        use crate::*;
        pub(crate) static DEFAULT_COLOR_ALIASES: once_cell::sync::Lazy<color::ColorMap> =
            once_cell::sync::Lazy::new(|| {
                let mut map = color::ColorMap::with_capacity(#capacity);
                #(#inserts)*
                map
            });
    };

    write(&workspace_root.join("src/gen/color_map.rs"), tokens)?;
    Ok(())
}

fn gen_schema() -> Result<()> {
    let workspace_root = &workspace_root();
    let schema = schema_for!(iced_style_config::Theme);
    fs::write(workspace_root.join("schema.json"), serde_json::to_string_pretty(&schema)?)?;
    Ok(())
}
